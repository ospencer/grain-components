// Generated by wit-bindgen. DO NOT EDIT!

module Proxy

from "runtime/dataStructures" include DataStructures
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/wasmf32" include WasmF32
from "runtime/unsafe/wasmf64" include WasmF64
from "runtime/unsafe/memory" include Memory
from "int32" include Int32
from "int64" include Int64
from "char" include Char
from "list" include List

from "./imports.gr" include Proxy
use Proxy.{ type IncomingRequest, type ResponseOutparam }

from "./proxy.gr" include Proxy as Core
use Core.{ module IncomingHandlerExports }

@unsafe
let _RET_AREA = Memory.malloc(56n)

@unsafe
provide let cabi_realloc = (originalPtr: WasmI32, originalSize: WasmI32, alignment: WasmI32, newSize: WasmI32) => {
  if (WasmI32.eqz(originalPtr)) {
    Memory.malloc(newSize)
  } else {
    let newPtr = Memory.malloc(newSize)
    let amt = if (WasmI32.(<)(originalSize, newSize)) originalSize else newSize
    Memory.copy(newPtr, originalPtr, amt)
    Memory.free(originalPtr)
    newPtr
  }
}

@unsafe
@externalName("wasi:http/incoming-handler@0.2.0#handle")
provide let wasiHttpIncomingHandler020Handle = (arg0: WasmI32, arg1: WasmI32) => {
  let handle_lift = {handle: WasmI32.toGrain(DataStructures.newInt32(arg0)),}: IncomingRequest
  let handle_lift0 = {handle: WasmI32.toGrain(DataStructures.newInt32(arg1)),}: ResponseOutparam
  IncomingHandlerExports.handle(handle_lift, handle_lift0)
  void
}
